local data = require "main.data"
function init(self)
	msg.post(".", "acquire_input_focus")
	msg.post(".", "change_level2")
	go.property("speed", 80)
	print(go.get_id())
	self.position = vmath.vector3()
	self.axis = vmath.vector3(0,1,0)
	self.moving = false
	self.key_input = ""
	self.correction = vmath.vector3()
	self.input_press = false
	self.pressE = false
end

function final(self)
	msg.post(".", "release_input_focus")
end

function update(self, dt)
	self.position = go.get_position()
	local pos_camera = go.get_position("/camera")
	local h_camera = go.get("/camera#script", "h_camera")
	local w_camera = go.get("/camera#script", "w_camera")
	
	if self.position.x > w_camera or self.position.y > h_camera or self.position.x < pos_camera.x or  self.position.y < pos_camera.y then
			msg.post("/camera", "movecam", {state = self.state})
	end
	
	if self.moving then	
		correct_axis(self)
		self.position = self.position + self.axis * self.speed * dt
		go.set_position(self.position)
	end
	
	self.axis.x = 0
	self.axis.y = 0
	self.moving = false
	self.key_input = ""
	self.correction = vmath.vector3()
end

function on_input(self, action_id, action) -- отзеркаливание sprite.set_hflip("#sprite", false)
local key = action_id

if key == hash("W") then
		self.key_input = "MoveUpPlayer"
		self.axis.y = 1
		key = self.key_input
		
		if action.pressed then
			self.input_press = true
			sprite.play_flipbook("#sprite", hash("up-idle"))
		end

		if action.released then
			sprite.play_flipbook("#sprite", hash("up"))
			self.input_press = false
		end
	end
	
	if key == hash("S") then
		self.key_input = "MoveDownPlayer"
		self.axis.y = -1
		key = self.key_input
		
		if action.pressed then
			self.input_press = true
			sprite.play_flipbook("#sprite", hash("down-idle"))
		end
		
		if action.released then
			sprite.play_flipbook("#sprite", hash("down"))
			self.input_press = false
		end
	end
	
	if key == hash("A") then
		self.key_input = "MoveLeftPlayer"
		self.axis.x = -1
		key = self.key_input
		
		if action.pressed then
			self.input_press = true
			sprite.play_flipbook("#sprite", hash("left-idle"))
		end
		
		if action.released then
			sprite.play_flipbook("#sprite", hash("left"))
			self.input_press = false
		end
	end
	
	if key == hash("D") then
		self.key_input = "MoveRightPlayer"
		self.axis.x = 1
		key = self.key_input
			
		if action.pressed then
			self.input_press = true
			sprite.play_flipbook("#sprite", hash("right-idle"))
		end
		
		if action.released then
			sprite.play_flipbook("#sprite", hash("right"))
			self.input_press = false
		end
	end

	if key == hash("Q") then
		msg.post("/think_go#think", "load_think")
	end

	if key == hash("E") then
		if action.pressed then
			self.pressE = true
		end

		if action.released then
			self.pressE = false
		end
	end
	
	if vmath.length(self.axis) > 0 then
		self.moving = true
		self.axis = vmath.normalize(self.axis)
	end
	
end

function correct_axis(self) -- чтобы гг не ходил наискосок для движения по y sprite.play_flipbook("#sprite", hash("up"))
	self.axis.x = 0
	self.axis.y = 0

	if self.key_input == "MoveUpPlayer" then
		self.axis.y = 1
	end
	if self.key_input == "MoveDownPlayer" then
		self.axis.y = -1
	end
	if self.key_input == "MoveLeftPlayer" then
		self.axis.x = -1
	end
	if self.key_input == "MoveRightPlayer" then
		self.axis.x = 1
	end
end

function on_message(self, message_id, message, sender)

	if message_id == hash("change_level1") then
		data.CURRENT_LEVEL = "level1"
		go.set_position(vmath.vector3(530,300,0.5))
	end

	if message_id == hash("change_level2") then
		data.CURRENT_LEVEL = "level2"
		go.set_position(vmath.vector3(2450,160,0.5))
	end

	if message_id == hash("change_level3") then
		data.CURRENT_LEVEL = "level3"
		go.set_position(vmath.vector3(530,300,0.5))
	end
	
	if message_id == hash("contact_point_response") then
		--нормальнрая колизия стен
		if message.distance > 0 then
			local proj = vmath.project(self.correction, message.normal * message.distance)
			if proj < 1 then
				local comp = (message.distance - message.distance * proj) * message.normal
				go.set_position(go.get_position() + comp)
				self.correction = self.correction + comp
			end
		end
	end
	
	if message.group == hash("lvl1obj1") and self.pressE then
		msg.post("/inventorys_go#inventory1", "lvl1obj1")
		data.LEVEL1_OBJECT1_SEARCHED = true
	end

	if message.group == hash("lvl1obj2") and self.pressE  then
		msg.post("/inventorys_go#inventory1", "lvl1obj2")
		data.LEVEL1_OBJECT2_SEARCHED = true
	end
end